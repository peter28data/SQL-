# PROBABILITY AND RANDOM VARIABLES
#1 Create an array of 100,000 numbers sampled from an Exponential distribution with rate parameter equal to 56.
import numpy as np
sample = np.random.exponential(1/56,100000)
print(sample)

#3 Draw a sample of 20,000 numbers from a Standard Normal distribution.
import numpy as np
from scipy.stats import norm
sample = norm.rvs(0, 1, size=20000)
print(sample)

#6 To calculate the cumulative probability of 40 in a Empirical Cumulative distribution function (ECDF), the data sample is in an array named x.
from statsmodels.distributions.empirical_distribution import ECDF
ecdf = ECDF(x)
print(ecdf(40))

#11 Create an array of one million numbers sampled from a normal distribution with a mean equal to 30 and standard deviation of 5. This returns random numbers in the 8th decimal place. 
import numpy as np
from scipy.stats import norm
sample = np.random.normal(30, 5, 1000000)
print(sample)


# GRAPHICS FOR STATISTICS
#2 Performing exploratory analysis to establish factors that contribute to the value of a second hand car. The pairplot shows a Scatterplot and a Kernel Density Plot to compare each variable with every other variable to display any relationships. 
import matplotlib.pyplot as plt
import seaborn as sns
sns.pairplot(valuation[['age', 'mpg', 'value']],
             diag_kind = 'kde')
plt.show()

# RANDOM SAMPLING
#4 For each of the next 50 visitors to your website you want to randomly assign them to either group A or B to establish the goal of customers seeing different versions of the landing page.
import numpy as np
groups = ['A', 'B']
assignment = np.random.choice(groups, 50)
print(assignment)

#5 Ensure that the same sample of random numbers are generated each time the code is executed. By setting a random seed and the parameters from 0 to 11, the code will execute 5 variables in a list and although it will be random, the random seed ensures it is replicable. 
import numpy as np
np.random.seed(42)
sample = np.random.randint(0, 11, 5)

#10 Perform a simulation of purchasing three seperate chocolate bars from a local store with results in a list of 3 items 'Lose' or 'Win'.
import numpy as np
purchases = np.random.choice(chocolate, 3, replace=False)
print(purchases)

#13 A bootstrapped sample of mean lap times for Formula 1 race cars, containd in an array "bootstraps". Generate a 95% confidence interval of the boostrapped lap times. 
import numpy as np
lower = np.quantile(bootstraps, 0.025)
upper = np.quantile(bootstraps, 0.975)

# EXPERIMENTS AND SIGNIFICANCE TESTING
#8 Is there a statistically significant difference in mean calcium intake in patients with normal bone density as compared to patients with osteopenia and osteoporosis?
from scipy import stats
results = stats.f_oneway(normal, osteoenia, osteoporosis)
print("statistic: {}".format(results[0]))
print("p-value: {}".format(results[1]))

#9 Test the hypothesis that the average spend in the small grocery store is not $8.
from scipy import stats
test = stats.ttest_1samp(spend, 8)
print(test.pvalue.round(3))

#12 Is there a significant difference in cholesterol levels between males and females?
from scipy import stats
results = stats.ttest_ind(males, females)
print("statistic: {}".format(results[0]))
print("p-value: {}".format(results[1]))
