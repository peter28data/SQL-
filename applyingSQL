#1 Aggregating Finances: 
Difference of active/Non-active Users
The following query will return two records grouped by active status, 'false' or 'true'. The selected fields are active status, number of transactions in each active status, the average amount spent in each active status, and the total amount spend by active status.

SELECT
  active,
  COUNT(payment_id) AS num_transactions,
  AVG(amount) AS avg_amount,
  SUM(amount) AS total_amount
FROM payment AS p
INNER JOIN customer AS c
ON p.customer_id = c.customer_id
GROUP BY active;



#2 Aggregating Strings: 
Demonstrate family-friendly/multi-lingual films
The query below will return a column with a list of all the different languages following by a column including all the film titles that are available in that language. This query demonstrates only films released in 2010 with a 'G' rating by combining two tables on the primary key 'language_id'.
SELECT
  name,
  STRING_AGG(title, ',') AS film_titles
FROM film AS f
INNER JOIN language AS l
  ON f.language_id = l.language_id
WHERE release_year = 2010
  AND rating = 'G'
GROUP BY name;



#3 Navigating Database
A database can have hundreds of tables and individually selecting all columns from each table would be an inefficient way to scrub through the tables for the right data to answer a business question. An efficient way is to query the list of tables by querying a specific system table such as Postgres or Oracle. This returns schema name, table name, and table owner such as Postgres
SELECT *
FROM pg_catalog.pg_tables
WHERE schemaname = 'public';

# SQL Server - TSQL
SELECT *
FROM INFORMATION_SCHEMA.TABLES;

# MySQL
SHOW TABLES;

#4 VIEW columns from tables
CREATE VIEW table_columns AS 
SELECT 
  table_name,
  STRING_AGG(column_name, ', ') AS columns
FROM information_schema.columns
WHERE table_schema = 'public'
GROUP BY table_name;
SELECT *
FROM table_columns



#5 Aggregate Film Lenths
The query returns a report of the average length of films grouped by categories, joined by two tables on a unique identifier for the films.
SELECT category,
  AVG(length) AS average_length
FROM film AS f
INNER JOIN category AS c
ON f.film_id = c.film_id
GROUP BY category
ORDER BY average_length;




#6 Aggregate Film Rentals
Returning number of rentals in each city to identify business opportunities for the best customer contrasting the potential detractors.
Join the 'rental' table and 'address' table for city information
Problem: There is no common key between these tables so we use the 'customer' table because it has a field in 'rental' and address'. Visually connected the three tables is a process called 



#7 Which Films are most Rented?
'films' table has rental duration 
'rental' table has which customer rented the films
There is no common id.
'inventory' table has film_id from 'films' and inventory_id from 'rental'.
SELECT
  title,
  COUNT(title)
FROM film AS f
INNER JOIN inventory AS i
ON f.film_id = i.film_id
INNER JOIN rental AS r
ON i.inventory_id = r.inventory_id
GROUP BY title
ORDER BY count DESC;



#8 Change Data Type
Convert to new data type for the duration of the query. This can be done with the casting function of double notation. Converting to integer will results in losing the decimals of each point of data.
SELECT 
  CAST(total_column AS integer)
FROM prices
SELECT total_column::integer
FROM prices


#9 Data Type
SELECT
  revenues_change::integer,
  COUNT(*)
FROM fortune500
GROUP BY revenues_change::integer
ORDER BY revuenes_change;


#10 Count Positive 
How many of the Fortune 500 companies had revenues increase in 2017
SELECT 
  COUNT(*)
FROM fortune500
WHERE revenues_change > 0;


SQL Test
#1 Get the data type of the column 'category'
SELECT TYPEOF(category) AS data
FROM sales
LIMIT 1;



#2 The 'day' column is currently stored as a string, day-month-year, convert to 



#3 Change whitespace to underscore



#4 Filter for customers with 4 or 5 previous transactions



#5 Datatype
From varchar  to integer



#6 Aggregate by Region



#7 Storage size of Column in bytes



#8 Num of Unique values 



#9 extract month



#10 top 5 books highest price



#11 sales between dates
SELECT 
  customer_id,
  customer_name,
  city_id
FROM customers
WHERE customer_id IN( SELECT customer_id FROM sales WHERE date BETWEEN '2022-10-05' AND '2022-10-20')



#12 Replace Missing values



#13 Mean, sum, count for banks
SELECT
  AVG(amount) :: DECIMAL(6,2) AS mean,
  SUM(amount) AS total,
  COUNT(amount) AS num_deposits
FROM deposits;



#14 Truncate the column 'date_time' to hourly precision



#15 Truncate the column 'delivery_date' to minute precision



#16 Which clients have missing date of last holiday



#17 Identify users whose 'username' begins with apple
SELECT
  username, 
  first_name,
  last_name,
FROM users
WHERE username LIKE 'apple%';



#18 Player info from certain players



#19 Subquery in Where clause
This retrieves the names of bakery products that have been sold. the subquery is needed to see if the bakery product appears in the sales table



#20 Range of Amount Paid
MIN/MAX



#21 Replace missing values


#29 Skewness from avg and median of inventory volume



#32 correlation between hours_studied and exam_score



#33 No missing values



#34 correlation between ratings and price



Topic
Data management 
Theory
EDA
32 of 106
